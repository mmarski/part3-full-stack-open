{"version":3,"sources":["PersonList.js","FilterForm.js","PersonForm.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["PersonList","personsToShow","removeCallback","map","p","key","name","number","onClick","id","FilterForm","value","onChange","PersonForm","onSubmit","newName","handleNameChange","newNumber","handleNumChange","type","baseUrl","getAll","axios","get","create","personObj","post","update","put","remove","delete","App","useState","persons","setPersons","setNewName","setNewNumber","nameFilter","setNameFilter","showAll","setShowAll","errorMessage","setErrorMessage","successMessage","setSuccessMessage","Notification","className","message","useEffect","personService","then","response","data","filter","toLowerCase","includes","event","target","preventDefault","foundPerson","find","undefined","console","log","concat","setTimeout","catch","error","window","confirm","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iNAUeA,EARI,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,eAChC,OACI,6BACKD,EAAcE,KAAI,SAAAC,GAAC,OAAI,uBAAGC,IAAKD,EAAEE,MAAOF,EAAEE,KAAnB,IAA0BF,EAAEG,OAA5B,IAAoC,4BAAQC,QAASN,EAAeE,EAAEK,GAAIL,EAAEE,OAAxC,gBCOzDI,EAVI,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACxB,OACI,8BACI,kDACsB,2BAAOD,MAAOA,EAAOC,SAAUA,OCYlDC,EAhBI,SAAC,GAAuE,IAAtEC,EAAqE,EAArEA,SAAUC,EAA2D,EAA3DA,QAASC,EAAkD,EAAlDA,iBAAkBC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,gBACjE,OACI,0BAAMJ,SAAUA,GACZ,sCACM,2BAAOH,MAAOI,EAASH,SAAUI,KAEvC,wCACQ,2BAAOL,MAAOM,EAAWL,SAAUM,KAE3C,6BACA,4BAAQC,KAAK,UAAb,U,gBCXNC,EAAU,eAkBD,OACXC,OAjBJ,WACI,OAAOC,IAAMC,IAAIH,IAiBjBI,OAdJ,SAAgBC,GACZ,OAAOH,IAAMI,KAAKN,EAASK,IAc3BE,OAXJ,SAAgBlB,EAAIgB,GAChB,OAAOH,IAAMM,IAAIR,EAAO,WAAOX,GAAMgB,IAWrCI,OARJ,SAAgBpB,GACZ,OAAOa,IAAMQ,OAAOV,EAAO,WAAOX,MC4HvBsB,EArIH,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACRC,EADQ,KACCC,EADD,OAEgBF,mBAAS,IAFzB,mBAERjB,EAFQ,KAECoB,EAFD,OAGoBH,mBAAS,IAH7B,mBAGRf,EAHQ,KAGGmB,EAHH,OAIsBJ,mBAAS,IAJ/B,mBAIRK,EAJQ,KAIIC,EAJJ,OAKgBN,oBAAS,GALzB,mBAKRO,EALQ,KAKCC,EALD,OAMwBR,mBAAS,MANjC,mBAMTS,EANS,KAMKC,EANL,OAO4BV,mBAAS,MAPrC,mBAOTW,EAPS,KAOOC,EAPP,KASVC,EAAe,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QACjC,OAAgB,OAAZA,EACK,KAIP,yBAAKD,UAAWA,GACbC,IA2FPC,qBAAU,WACRC,EAAc5B,SACX6B,MAAK,SAAAC,GACJjB,EAAWiB,EAASC,WAEvB,IAEH,IAAMnD,EAAgBsC,EAAUN,EAAUA,EAAQoB,QAChD,SAAAjD,GAAC,OAAIA,EAAEE,KAAKgD,cAAcC,SAASlB,EAAWiB,kBAGhD,OACE,6BACE,yCACA,kBAACT,EAAD,CAAcC,UAAU,QAAQC,QAASN,IACzC,kBAACI,EAAD,CAAcC,UAAU,UAAUC,QAASJ,IAC3C,kBAAC,EAAD,CAAYhC,MAAO0B,EAAYzB,SA9CJ,SAAC4C,GAC9BlB,EAAckB,EAAMC,OAAO9C,OAEzB6B,EADiB,KAAfH,MA6CF,uCACA,kBAAC,EAAD,CAAYvB,SAxGA,SAAC0C,GACfA,EAAME,iBACN,IAAMC,EAAc1B,EAAQ2B,MAAK,SAAAxD,GAAC,OAAIA,EAAEE,OAASS,KACjD,QAAoB8C,IAAhBF,EAAJ,CAwBA,IAAMlC,EAAY,CAChBnB,KAAMS,EACNR,OAAQU,GAEVgC,EAAczB,OAAOC,GAClByB,MAAK,SAAAC,GACJW,QAAQC,IAAIZ,GACZjB,EAAWD,EAAQ+B,OAAOb,EAASC,OACnCR,EAAkB7B,EAAU,UACxBkD,YAAW,WACTrB,EAAkB,QACjB,QAERsB,OAAM,SAAAC,GACLzB,EAAgB,iBAAmB3B,EAAU,mBAC7CkD,YAAW,WACTvB,EAAgB,QACf,KACHoB,QAAQC,IAAII,MAEhBhC,EAAW,IACXC,EAAa,SA5CPgC,OAAOC,QAAP,UAAkBtD,EAAlB,2EACF4C,EAAYpD,OAASU,EACrBgC,EAActB,OAAOgC,EAAYlD,GAAIkD,GAClCT,MAAK,SAAAC,GACJP,EAAkB7B,EAAU,mBAC5BkD,YAAW,WACTrB,EAAkB,QACjB,KACHV,EAAWD,EAAQ9B,KAAI,SAAAC,GAAC,OAAIA,EAAEK,KAAOkD,EAAYlD,GAAKL,EAAI+C,EAASC,SACnEjB,EAAW,IACXC,EAAa,OAEd8B,OAAM,SAAAC,GACLzB,EAAgB,oBAAsB3B,EAAU,qDAChDkD,YAAW,WACTvB,EAAgB,QACf,KACHoB,QAAQC,IAAII,GACZjC,EAAWD,EAAQoB,QAAO,SAAAjD,GAAC,OAAIA,EAAEK,KAAOkD,EAAYlD,YAkF3BM,QAASA,EAASC,iBAtD5B,SAACwC,GACxBrB,EAAWqB,EAAMC,OAAO9C,QAqD+DM,UAAWA,EAAWC,gBAnDvF,SAACsC,GACvBpB,EAAaoB,EAAMC,OAAO9C,UAmDxB,uCACA,kBAAC,EAAD,CAAYV,cAAeA,EAAeC,eAzCpB,SAACO,EAAIH,GAAL,OAAc,YACM,IAAxC8D,OAAOC,QAAQ,UAAW/D,EAAK,MACjC2C,EAAcpB,OAAOpB,GAClByC,MAAK,SAAAC,GACJW,QAAQC,IAAI,UAAWZ,GACvBjB,EAAWD,EAAQoB,QAAO,SAAAjD,GAAC,OAAIA,EAAEK,KAAOA,MACxCmC,EAAkBtC,EAAO,YACvB2D,YAAW,WACTrB,EAAkB,QACjB,QAENsB,OAAM,SAAAC,GACLzB,EAAgB,oBAAsBpC,EAAO,mBAC3C2D,YAAW,WACTvB,EAAgB,QACf,KACLoB,QAAQC,IAAII,YCjGFG,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,iB","file":"static/js/main.f403a056.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst PersonList = ({personsToShow, removeCallback}) => {\r\n    return (\r\n        <div>\r\n            {personsToShow.map(p => <p key={p.name}>{p.name} {p.number} <button onClick={removeCallback(p.id, p.name)}>Delete</button></p>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PersonList;","import React from 'react'\r\n\r\nconst FilterForm = ({value, onChange}) => {\r\n    return (\r\n        <form>\r\n            <div>\r\n                Filter shown with <input value={value} onChange={onChange}></input>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default FilterForm;","import React from 'react'\r\n\r\nconst PersonForm = ({onSubmit, newName, handleNameChange, newNumber, handleNumChange}) => {\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <div>\r\n            name: <input value={newName} onChange={handleNameChange} />\r\n            </div>\r\n            <div>\r\n            Number: <input value={newNumber} onChange={handleNumChange} />\r\n            </div>\r\n            <div>\r\n            <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm;","import axios from 'axios';\r\nconst baseUrl = '/api/persons'\r\n\r\nfunction getAll() {\r\n    return axios.get(baseUrl)\r\n}\r\n\r\nfunction create(personObj) {\r\n    return axios.post(baseUrl, personObj)\r\n}\r\n\r\nfunction update(id, personObj) {\r\n    return axios.put(baseUrl + `/${id}`, personObj)\r\n}\r\n\r\nfunction remove(id) {\r\n    return axios.delete(baseUrl + `/${id}`)\r\n}\r\n\r\nexport default {\r\n    getAll: getAll,\r\n    create: create,\r\n    update: update,\r\n    remove: remove\r\n}","import React, { useState, useEffect } from 'react'\r\nimport './index.css';\r\nimport PersonList from './PersonList';\r\nimport FilterForm from './FilterForm';\r\nimport PersonForm from './PersonForm';\r\nimport personService from './services/persons'\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons] = useState([]) \r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ nameFilter, setNameFilter ] = useState('')\r\n  const [ showAll, setShowAll ] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [successMessage, setSuccessMessage] = useState(null)\r\n\r\n  const Notification = ({ className, message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className={className}>\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const addName = (event) => {\r\n    event.preventDefault()\r\n    const foundPerson = persons.find(p => p.name === newName)\r\n    if (foundPerson !== undefined) {\r\n      if (window.confirm(`${newName} is already added to phonebook. Replace the number with the new one?`)) {\r\n        foundPerson.number = newNumber\r\n        personService.update(foundPerson.id, foundPerson)\r\n          .then(response => {\r\n            setSuccessMessage(newName + \" number updated\")\r\n            setTimeout(() => {\r\n              setSuccessMessage(null)\r\n            }, 5000)\r\n            setPersons(persons.map(p => p.id !== foundPerson.id ? p : response.data))\r\n            setNewName('')\r\n            setNewNumber('')\r\n          })\r\n          .catch(error => {\r\n            setErrorMessage(\"Failed to update \" + newName + \", data already removed from server. Check console\")\r\n            setTimeout(() => {\r\n              setErrorMessage(null)\r\n            }, 5000)\r\n            console.log(error)\r\n            setPersons(persons.filter(p => p.id !== foundPerson.id))\r\n          })\r\n      }\r\n      return;\r\n    }\r\n    const personObj = {\r\n      name: newName,\r\n      number: newNumber\r\n    }\r\n    personService.create(personObj)\r\n      .then(response => {\r\n        console.log(response)\r\n        setPersons(persons.concat(response.data))\r\n        setSuccessMessage(newName + \" added\")\r\n            setTimeout(() => {\r\n              setSuccessMessage(null)\r\n            }, 5000)\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\"Failed to add \" + newName + \", Check console\")\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n        console.log(error)\r\n      })\r\n    setNewName('')\r\n    setNewNumber('')\r\n  }\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n  const handleNumChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n  const handleNameFilterChange = (event) => {\r\n    setNameFilter(event.target.value)\r\n    if (nameFilter === \"\") {\r\n      setShowAll(true)\r\n    }\r\n    else {\r\n      setShowAll(false)\r\n    }\r\n  }\r\n  const handleRemoveEntry = (id, name) => () => {\r\n    if (window.confirm(\"Delete \"+ name+\"?\") === true) {\r\n      personService.remove(id)\r\n        .then(response => {\r\n          console.log(\"Deleted\", response)\r\n          setPersons(persons.filter(p => p.id !== id))\r\n          setSuccessMessage(name + \" deleted\")\r\n            setTimeout(() => {\r\n              setSuccessMessage(null)\r\n            }, 5000)\r\n        })\r\n        .catch(error => {\r\n          setErrorMessage(\"Failed to delete \" + name + \", check console\")\r\n            setTimeout(() => {\r\n              setErrorMessage(null)\r\n            }, 5000)\r\n          console.log(error)\r\n        })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    personService.getAll()\r\n      .then(response => {\r\n        setPersons(response.data)\r\n      })\r\n  }, [])\r\n\r\n  const personsToShow = showAll ? persons : persons.filter(\r\n    p => p.name.toLowerCase().includes(nameFilter.toLowerCase())\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <Notification className=\"error\" message={errorMessage} />\r\n      <Notification className=\"success\" message={successMessage} />\r\n      <FilterForm value={nameFilter} onChange={handleNameFilterChange} />\r\n      <h2>Add new</h2>\r\n      <PersonForm onSubmit={addName} newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumChange={handleNumChange} />\r\n      <h2>Numbers</h2>\r\n      <PersonList personsToShow={personsToShow} removeCallback={handleRemoveEntry} />\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}